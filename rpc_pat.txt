import hashlib
from bitcoin.core import lx, b2lx

def calculate_block_hash(version, prev_block_hash, merkle_root, timestamp, bits, nonce):
    header = (
        version.to_bytes(4, 'little') +
        lx(prev_block_hash) +
        lx(merkle_root) +
        timestamp.to_bytes(4, 'little') +
        bits.to_bytes(4, 'little') +
        nonce.to_bytes(4, 'little')
    )
    hash1 = hashlib.sha256(header).digest()
    block_hash = hashlib.sha256(hash1).digest()
    return b2lx(block_hash)

version = 537346048                  
prev_block_hash = "000000000000000000026bed0a517f047ff6153438ee4095f931bebb4c5fa307"  
merkle_root = "c4e8db0cdbef44042b1c76b23dafa0a1d19118a1d326f4b4c64884aa3295722e"  
timestamp = 1731441020              
bits = 0x1702c4e4                   
nonce = 98137976                    
known_block_hash = "00000000000000000001ca0902ec8a2abbc16637ef61659c5e7d30418e6a1950"

calculated_hash = calculate_block_hash(version, prev_block_hash, merkle_root, timestamp, bits, nonce)
print("Calculated Hash:", calculated_hash)
print("Known Block Hash:", known_block_hash)
if calculated_hash == known_block_hash:
    print("The block hash is correctly calculated.")
else:
    print("The block hash is incorrect.")

